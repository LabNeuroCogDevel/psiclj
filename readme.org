#+OPTIONS: toc:nil
* PsiClj
A http server with a simple API designed for experiment presentation. Bring your own javascript.



Inspired by [[https://psiturk.org/][psiTurk]] ([[https://link.springer.com/article/10.3758/s13428-015-0642-8][web]], [[https://github.com/NYUCCL/psiTurk][github]])

** Goals
   * Present an existing javascript/browser based experiment and record responses to a database. 
   * Run on cheap/free web hosting (heroku, openshift, self-host) with an eye toward integrating with Amazon Turk
   * Easily install and run within software-restricted hospital environments (MS Windows, user level permissions only)
   * Easy development on linux (cf. EPrime)

** Usage
*** Server

    - should already have javascript task in ~out/~ with at least an ~index.html~. built in ~not-found.html~ will be used when not within ~out/~
    - start server (see `psiclj -h` for changing port and root path)
    - open in browser

**** Development version 
     Minimally, you need a ~out/index.html~ file before running:

     #+begin_src bash
       clojure -m psiclj
     #+end_src
    
     then browse to http://localhost:3001/
**** Run locally without command line fiddling
***** Windows Icon
      * copy with html/media in ~out/~ in same directory
      * create shortcut
      * edit shortcut to launch in exe/jar's directory
***** ~.bat~ script
      specify all the command options in mytask.bat on the desktop
***** TODO use file picker/gui from java
      * consider reading from ini/settings for many tasks? (present on index page)
      * might be good to have a gui where a close button exists

**** Run Hosted
***** heroku buildpack
      see https://github.com/LabNeuroCogDevel/choice-landscape (esp `Procfile`)

      #+begin_src bash
	heroku buildpacks:add https://github.com/LabNeuroCogDevel/psiclj.git
        heroku addons:create  heroku-postgresql
	echo "web: psiclj-heroku -r out/ -v myversionid -t mytaskname" > Procfile
      #+end_src

      * must setup postgresql (sqlite file will not be on a persistent file system)
      * default setup looks to environment for ~PORT~ and ~DATABASE_URL~
        
***** self host
      run right from clojure as startup time is unlikely to be the issue it is with free dynamo's from heroku. set ~PORT=80~ and use the default sqlite3 backend, no postgresql needed.

**** Setup
     * the ~out/extra~ directory is used for additional root-level routes (e.g http://task.herokuapp.com/testing.html from ~out/extra/testing.html~)

*** Javascript setup
    Running ~psiclj~ alone doesn't do much. You'll likely want a javascript task to make use of the very simple API.
    * The server looks for ~index.html~ at a specified directory (default ~out/~) and serves it at "localhost:port/id/task/timepoint/run/".
    * All resources should use relative paths. Do not use a leading slash.  like ~<script src="mytask.js">~ NOT ~<script src="/mytask.js">~
    * API: all HTTP POST requests (also relative) can be made to 
      | response | expects json body. upserts into db. expect cumulative responses, e.g each feedback period, send all responses so far. |
      | info     | ideally system info like screen size, browser agent                                                                   |
      | finish   | any body. disables using same /id/task/timepoint/run# combination again                                               |

**** Library suggestions
    There are a few libaries that can aid in writing the experiment to be served by ~psiclj~ 
     * [[https://www.jspsych.org][jsPsych]] - many plugins
     * [[https://github.com/psychopy/psychojs][psychojs]] - likely generated by psychopy code builder.
     * generic game frameworks
       * clojurescript (w/figwheel and devcards! see [[https://github.com/bhauman/flappy-bird-demo-new][flappy-bird-demo]] )
       * https://elm-lang.org/

** Limitations
   * psiTurk has much better documentation and integration with amazon turk

** Hacking
   
*** Build
    see ~Makefile~. depends on clojure. building an executable requires native image from graalvm. Setup for heroku in ~Dockerfile.heroku~
    
**** windows
     might need native-image.cmd ? https://github.com/babashka/babashka-sql-pods/blob/master/bb.edn
     
*** Databases
   ~postgresql~ and ~sqlite~ (default) are available as of 20211009. Where the DBs differ (upsert), there is specific code for each. see ~src/all.sql~. sql file is parsed by hugsql (yesql derivative). ~DATABASE_URL~ environment variable is supported for heroku. When it exists, the server use postgresql. DB libaries complicate generating the graalvm native image (static binary).

   #+begin_src bash
     sudo su - postgres -c "initdb --locale en_US.UTF-8 -D '/var/lib/postgres/data'"
     #sudo vim /var/lib/postgres/data/pg_hba.conf # allow 127.0.0.1 for all users
     # local   all             all                                     trust
     sudo systemctl start postgresql
     sudo -u postgres createdb testdb
     psql -U postgres -h localhost testdb
     # DATABASE_URL='postgresql://postgres:x@localhost:5432/testdb
     # heroku addons:docs heroku-postgresql

   #+end_src
   
**** sqlite3 native image on linux
    https://github.com/xerial/sqlite-jdbc/issues/584
    but 
    https://github.com/mageddo/graalvm-examples/tree/59f1f1bf09894681edfddaa100b4504770ad0685/sqlite

*** resources vs files
    the initial version used ~io/resources~ and bundled task data with the bytecode (uberjar or executable). This is great for providing a single executable for the task, but makes a much less flexible tool. It might be nice to provide a build option for revering back to the everything-all-together bundling. psiTurk uses this approach: clone the whole project and modify what you want.

* TODO
  * add Procfile and heroku documentation
  * and /quit route to shutdown server
  * counter balance routes (?cb=A, available to window.location, doesn't change routing)
  * host multiple tasks? would require rework of @TASKNAME @root-path and routing functions
